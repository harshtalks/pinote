// Everything related to local first
import { sqliteTable } from "drizzle-orm/sqlite-core";
import * as t from "drizzle-orm/sqlite-core";
import { PrefixedIDs } from "../schema.helper";
import { createdAtSchema, updatedAtSchema } from "../schema.common";
import { users } from "../*";

export const lofiMeta = sqliteTable("lofi_meta", {
  id: t.text().primaryKey().$defaultFn(PrefixedIDs.lofiMeta),
  key: t.text().notNull(),
  value: t
    .text({
      mode: "json",
    })
    .notNull(),
  createdAt: createdAtSchema,
  updatedAt: updatedAtSchema,
});

export const lofiClientGroup = sqliteTable(
  "lofi_client_group",
  {
    id: t.text().primaryKey().$defaultFn(PrefixedIDs.lofiClientGroup),
    // I want to store the clientGroup Id here - generated by replicache
    clientGroupId: t.text().notNull(),
    createdAt: createdAtSchema,
    updatedAt: updatedAtSchema,
    userId: t
      .text()
      .notNull()
      .references(() => users.id, {
        onDelete: "cascade",
      }),
    cvrVersion: t.integer().notNull(),
  },
  (table) => ({
    clientGroupIdIndex: t
      .uniqueIndex("client_group_id")
      .on(table.clientGroupId),
  }),
);

export const lofiClient = sqliteTable(
  "lofi_client",
  {
    id: t.text().primaryKey().$defaultFn(PrefixedIDs.lofiClient),
    // I want to store the client Id here - generated by replicache
    clientId: t.text().notNull(),
    createdAt: createdAtSchema,
    updatedAt: updatedAtSchema,
    clientGroupId: t
      .text()
      .notNull()
      .references(() => lofiClientGroup.clientGroupId, { onDelete: "cascade" }),
    lastMutationId: t.integer().notNull(),
  },
  (table) => ({
    clientIdIndex: t.uniqueIndex("replicache_client_id").on(table.clientId),
  }),
);

export type ClientGroup = typeof lofiClientGroup.$inferSelect;
export type Client = typeof lofiClient.$inferSelect;

export type ClientGroupInsert = typeof lofiClientGroup.$inferInsert;
export type ClientInsert = typeof lofiClient.$inferInsert;
